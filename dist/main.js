/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _skycons__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./skycons */ \"./src/skycons.js\");\n/* harmony import */ var _skycons__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_skycons__WEBPACK_IMPORTED_MODULE_0__);\n\n\n// Current Weather Section\nconst preloader = document.querySelector('.preloader');\nconst openMenuBtn = document.querySelector('button.location-search-btn');\nconst currentLocationBtn = document.querySelector('.location-bar > .material-icons');\nconst currentWeatherIcon = document.querySelector('canvas#current-weather-icon');\nconst currentTemp = document.querySelector('.temperature-degrees');\nconst currentTempUnit = document.querySelector('.current-temperature-display > span');\nconst currentFeelsLikeTemp = document.querySelector('.feels-like-temperature');\nconst currentTempDescription = document.querySelector('.current-weather-section .temperature-description')\nconst currentDate = document.querySelector('.current-date')\nconst currentLocation = document.querySelector('.current-location');\n\n// Search Menu Section\nconst searchMenu = document.querySelector('.search-menu-container');\nconst closeMenuBtn = document.querySelector('.close-menu-btn');\nconst locationSearchBar = document.querySelector('input#location-search');\nconst searchSubmitBtn = document.querySelector('button.submit-search');\nconst searchSuggestionsContainer = document.querySelector('.search-location-suggestions-container');\nconst searchSuggestionsDisplay = Array.from(document.querySelectorAll('.search-location-suggestions'));\n\n// One Week Forecast Weather Section\nconst degreeCelsiusIcon = document.querySelector('.degree-celsius-icon');\nconst degreeFahrenheitIcon = document.querySelector('.degree-fahrenheit-icon');\nlet temperatureUnitState = 'Degree Celsius';\nconst forecastBoxes = Array.from(document.querySelectorAll('.forecast-box'));\nconst forecastBoxesDate = Array.from(document.querySelectorAll('.forecast-box > .date'));\nconst forecastBoxesIcon = Array.from(document.querySelectorAll('.forecast-box > #forecast-weather-icon'));\nconst forecastBoxesHighestTemp = Array.from(document.querySelectorAll('.highest-temperature > .temperature-degrees'));\nconst forecastBoxesHighestTempUnit = Array.from(document.querySelectorAll('.highest-temperature > span'));\nconst forecastBoxesLowestTemp = Array.from(document.querySelectorAll('.lowest-temperature > .temperature-degrees'));\nconst forecastBoxesLowestTempUnit = Array.from(document.querySelectorAll('.lowest-temperature > span'));\n\n// Current Weather Highlights Section \nconst windStatusBoxValue = document.querySelector('.wind-status-value');\nconst windStatusBoxDirectionValue = document.querySelector('.wind-direction-value');\nconst windStatusBoxDirectionIcon = document.querySelector('.wind-direction-icon');\nconst humidityBoxValue = document.querySelector('.humidity-value');\nconst humidityBoxPercentageBar = document.querySelector('.percentage-value');\nconst visibilityBoxValue = document.querySelector('.visibility-value');\nconst airPressureBoxValue = document.querySelector('.air-pressure-value');\n\n// Load user's location weather info every time user entered the page\nwindow.addEventListener('load', function() {\n    displayCurrentLocationWeather();\n    closeLoadingPage();\n});\n\n// Display user's location weather info when user clicked on the current location button\ncurrentLocationBtn.addEventListener('click', displayCurrentLocationWeather);\n\n// Open and close search menu\nopenMenuBtn.addEventListener('click', () => {\n    searchMenu.classList.add('active-menu');\n\n    searchSuggestionsDisplay.forEach(box => {\n        box.innerHTML = '';\n        box.style.display = 'none';\n    })\n})\n\ncloseMenuBtn.addEventListener('click', () => {\n    searchMenu.classList.remove('active-menu');\n    locationSearchBar.value = '';\n})\n\n// Display search location suggestions when user type sth in the search bar\nlocationSearchBar.addEventListener('keyup', async function() {\n\n    if (locationSearchBar.value != '') {\n        searchSuggestionsDisplay.forEach(box => {\n            box.innerHTML = '';\n            box.style.display = 'none';\n        })\n        findLocationName(locationSearchBar.value.trim());\n    } else {\n        searchSuggestionsDisplay.forEach(box => {\n            box.innerHTML = '';\n            box.style.display = 'none';\n        });\n    }\n\n});\n\n// Remove previous search location suggestions after user type more words\nlocationSearchBar.addEventListener('keydown', () => {\n    searchSuggestionsDisplay.forEach(box => {\n        box.innerHTML = '';\n        box.style.display = 'none';\n    })\n})\n\n// Display desired location weather info when user searched for a particular location\nsearchSubmitBtn.addEventListener('click', async function() {\n\n    if (locationSearchBar.value != '') {\n        let latitude;\n        let longitude;\n        [latitude, longitude] = await convertLocationNameToGeoCoordinates(locationSearchBar.value.trim());\n        displayLocationWeather(latitude, longitude);\n        locationSearchBar.value = '';\n        setTimeout(() => {\n            searchMenu.classList.remove('active-menu');\n            window.scrollTo(0, 0);\n        }, 800);\n    } else {\n        return;\n    }\n\n});\n\n// Output location search result when user clicked on a location recommedation box\nsearchSuggestionsDisplay.forEach(box => {\n    box.addEventListener('click', async () => {\n        locationSearchBar.value = box.firstChild.textContent;\n        await updateLocationWeather(box.firstChild);\n        setTimeout(() => {searchMenu.classList.remove('active-menu')}, 800);\n        locationSearchBar.value = '';\n    })\n})\n\n// Switch between Degree Celsius & Degree Fahrenheit \ndegreeCelsiusIcon.addEventListener('click', () => {\n    if (temperatureUnitState != 'Degree Celsius') {\n        degreeCelsiusIcon.style.cssText = 'background-color: #E7E7EB; border: 10px solid #E7E7EB; color: #110E3C';\n        degreeFahrenheitIcon.style.cssText = 'background-color: #6E707A; border: 10px solid #6E707A; color: #E7E7EB';\n        temperatureUnitState = 'Degree Celsius';\n        switchTemperatureUnit();\n    } else {\n        return;\n    }\n})\n\ndegreeFahrenheitIcon.addEventListener('click', () => {\n    if (temperatureUnitState != 'Degree Fahrenheit') {\n        degreeFahrenheitIcon.style.cssText = 'background-color: #E7E7EB; border: 10px solid #E7E7EB; color: #110E3C';\n        degreeCelsiusIcon.style.cssText = 'background-color: #6E707A; border: 10px solid #6E707A; color: #E7E7EB';\n        temperatureUnitState = 'Degree Fahrenheit';\n        switchTemperatureUnit();\n    } else {\n        return;\n    }\n})\n\n// Update location weather info every 30 secs\nsetInterval(async () => {await updateLocationWeather(currentLocation)}, 60000);\n\n// Close the loading page after the current weather information has rendered\nfunction closeLoadingPage() {\n\n    setTimeout(() => {\n        document.documentElement.style.scrollBehavior = \"auto\";\n        window.scrollTo(0, 0);\n        preloader.style.display = \"none\";\n    }, 4000);\n\n}\n\n// Find all related city/country list based on search value\nasync function findLocationName(searchValue) {\n\n    const geocodingAPI = `https://api.openweathermap.org/geo/1.0/direct?q=${searchValue}&limit=5&appid=ec021a840e27b53a39dd9bb4563c0c3c`;\n\n    const reponse = await fetch(geocodingAPI, {mode: 'cors'});\n\n    const locationInfo = await reponse.json();\n\n    for (let i = 0; i < locationInfo.length; i++) {\n\n        const locationValue = document.createElement('p');\n        locationValue.style.cssText = 'font-size: 16px;';\n        locationValue.textContent = `${locationInfo[i].name}, ${locationInfo[i].country}`;\n\n        const locationIcon = document.createElement('span');\n        locationIcon.classList.add('material-icons');\n        locationIcon.textContent = 'navigate_next';\n\n        searchSuggestionsDisplay[i].appendChild(locationValue);\n        searchSuggestionsDisplay[i].appendChild(locationIcon);\n        searchSuggestionsDisplay[i].style.display = 'flex';\n    }\n}\n\n// Convert the location user searched to Geographical Coordinates\nasync function convertLocationNameToGeoCoordinates(cityName, countryName) {\n\n    const geocodingAPI = `https://api.openweathermap.org/geo/1.0/direct?q=${cityName},${countryName}&limit=1&appid=ec021a840e27b53a39dd9bb4563c0c3c`;\n    \n    const reponse = await fetch(geocodingAPI, {mode: 'cors'});\n    \n    const locationInfo = await reponse.json();\n\n    const geoCoordinates = [locationInfo[0].lat, locationInfo[0].lon];\n\n    return geoCoordinates;\n\n}\n\n// Display the weather information for the respective location\nasync function displayLocationWeather(latitude, longitude) {\n\n    const currentWeatherAPI = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=ec021a840e27b53a39dd9bb4563c0c3c&units=metric`;\n\n    const currentWeatherInfoReponse = await fetch(currentWeatherAPI, {mode: 'cors'});\n            \n    const currentWeatherInfo = await currentWeatherInfoReponse.json();\n\n    const oneCallAPI = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&appid=ec021a840e27b53a39dd9bb4563c0c3c&units=metric`;\n\n    const oneCallInfoReponse = await fetch(oneCallAPI, {mode: 'cors'});\n\n    const oneCallInfo = await oneCallInfoReponse.json();\n\n    // Display current weather information\n    if (temperatureUnitState == 'Degree Celsius') {\n\n        currentTemp.textContent = Math.round(currentWeatherInfo.main.temp);\n\n        currentTempUnit.textContent = '°C';\n\n        currentFeelsLikeTemp.textContent = Math.round(currentWeatherInfo.main.feels_like);\n\n    } else if (temperatureUnitState == 'Degree Fahrenheit') {\n\n        currentTemp.textContent = Math.round(currentWeatherInfo.main.temp * 1.8 + 32);\n\n        currentTempUnit.textContent = '°F';\n\n        currentFeelsLikeTemp.textContent = Math.round(currentWeatherInfo.main.feels_like * 1.8 + 32);\n\n    }\n\n    currentTempDescription.textContent = currentWeatherInfo.weather[0].main;\n\n    const currentGMTTimzone = new Date();\n\n    currentDate.textContent = new Date(currentGMTTimzone.getTime() + oneCallInfo.timezone_offset * 1000).toUTCString().slice(0, 11);\n\n    currentLocation.textContent = currentWeatherInfo.name + ', ' + currentWeatherInfo.sys.country;\n\n    new Icon(currentWeatherIcon, currentWeatherInfo.weather[0].icon).setIcon();\n\n    // Display 1 week forecast weather information\n\n    for (let i = 0; i < forecastBoxes.length; i++) {\n\n        forecastBoxesDate[i].textContent = new Date(currentGMTTimzone.getTime() + oneCallInfo.timezone_offset * 1000 + (i + 1) * 1000 * 60 * 60 *24).toUTCString().slice(0, 11);\n        new Icon(forecastBoxesIcon[i], oneCallInfo.daily[i + 1].weather[0].icon).setIcon();\n\n        if (temperatureUnitState == 'Degree Celsius') {\n\n            forecastBoxesHighestTemp[i].textContent = Math.round(oneCallInfo.daily[i + 1].temp.max);\n            forecastBoxesHighestTempUnit[i].textContent = '°C';\n\n            forecastBoxesLowestTemp[i].textContent = Math.round(oneCallInfo.daily[i + 1].temp.min);\n            forecastBoxesLowestTempUnit[i].textContent = '°C';\n\n        } else if (temperatureUnitState == 'Degree Fahrenheit') {\n\n            forecastBoxesHighestTemp[i].textContent = Math.round(oneCallInfo.daily[i + 1].temp.max * 1.8 + 32);\n            forecastBoxesHighestTempUnit[i].textContent = '°F';\n\n            forecastBoxesLowestTemp[i].textContent = Math.round(oneCallInfo.daily[i + 1].temp.min * 1.8 + 32);\n            forecastBoxesLowestTempUnit[i].textContent = '°F';\n\n        }\n    }\n\n    // Display today's weather highlights (wind status, humidity, etc) for the respective location\n\n    windStatusBoxValue.textContent = (currentWeatherInfo.wind.speed * 2.23693629).toFixed(1);\n    windStatusBoxDirectionValue.textContent = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\", \"N\"][(Math.round(currentWeatherInfo.wind.deg / 22.5))];\n    windStatusBoxDirectionIcon.style.transform = `rotate(${Math.round(currentWeatherInfo.wind.deg / 22.5) * 22.5}deg)`;\n\n    humidityBoxValue.textContent = currentWeatherInfo.main.humidity;\n    humidityBoxPercentageBar.style.width = `${currentWeatherInfo.main.humidity}%`; \n\n    visibilityBoxValue.textContent = (currentWeatherInfo.visibility / 1000).toFixed(1);\n\n    airPressureBoxValue.textContent = currentWeatherInfo.main.pressure;\n}\n\n// Display the current location weather\nfunction displayCurrentLocationWeather() {\n\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n            const latitude = position.coords.latitude;\n            const longitude = position.coords.longitude;\n            displayLocationWeather(latitude, longitude);\n        })\n    }\n\n}\n\n// Update the location weather info\nasync function updateLocationWeather(location) {\n    let latitude, longitude, cityName, countryName;\n    [cityName, countryName] = location.textContent.split(', ');\n    [latitude, longitude] = await convertLocationNameToGeoCoordinates(cityName, countryName);\n    displayLocationWeather(latitude, longitude);\n}\n\n// Switch temperature between Degree Celsius & Degree Fahrenheit \nfunction switchTemperatureUnit() {\n    if (temperatureUnitState == 'Degree Celsius') {\n        currentTemp.textContent = Math.round((currentTemp.textContent - 32) / 1.8);\n        currentTempUnit.textContent = '°C';\n        currentFeelsLikeTemp.textContent = Math.round((currentFeelsLikeTemp.textContent - 32) / 1.8);\n        forecastBoxesHighestTemp.forEach(temp => {\n            temp.textContent = Math.round((temp.textContent - 32) / 1.8);\n        })\n        forecastBoxesHighestTempUnit.forEach(unit => {\n            unit.textContent = '°C';\n        });\n        forecastBoxesLowestTemp.forEach(temp => {\n            temp.textContent = Math.round((temp.textContent - 32) / 1.8);\n        })\n        forecastBoxesLowestTempUnit.forEach(unit => {\n            unit.textContent = '°C';\n        });\n    } else if (temperatureUnitState == 'Degree Fahrenheit') {\n        currentTemp.textContent = Math.round(currentTemp.textContent * 1.8 + 32);\n        currentTempUnit.textContent = '°F';\n        currentFeelsLikeTemp.textContent = Math.round(currentFeelsLikeTemp.textContent * 1.8 + 32);\n        forecastBoxesHighestTemp.forEach(temp => {\n            temp.textContent = Math.round(temp.textContent * 1.8 + 32);\n        })\n        forecastBoxesHighestTempUnit.forEach(unit => {\n            unit.textContent = '°F';\n        });\n        forecastBoxesLowestTemp.forEach(temp => {\n            temp.textContent = Math.round(temp.textContent * 1.8 + 32);\n        })\n        forecastBoxesLowestTempUnit.forEach(unit => {\n            unit.textContent = '°F';\n        });\n    }\n}\n\nclass Icon {\n    constructor(iconDOM, icon) {\n        this.iconDom = iconDOM;\n        this.icon = icon;\n        this.iconType = null;\n    }\n\n    convertIconType() {\n        if (this.icon === \"01d\") {\n            return \"CLEAR_DAY\";\n        } else if (this.icon === \"01n\") {\n            return \"CLEAR_NIGHT\";\n        } else if (this.icon === \"02d\" || this.icon === \"04d\") {\n            return \"PARTLY_CLOUDY_DAY\";\n        } else if (this.icon === \"02n\" || this.icon === \"04n\") {\n            return \"PARTLY_CLOUDY_NIGHT\";\n        } else if (this.icon === \"03d\" || this.icon === \"03n\") {\n            return \"CLOUDY\";\n        } else if (this.icon === \"09d\" || this.icon === \"09n\") {\n            return \"RAIN\";\n        } else if (this.icon === \"10d\") {\n            return \"SHOWERS_DAY\";\n        } else if (this.icon === \"10n\") {\n            return \"SHOWERS_NIGHT\";\n        } else if (this.icon === \"11d\") {\n            return \"THUNDER_SHOWERS_DAY\";\n        } else if (this.icon === \"11n\") {\n            return \"THUNDER_SHOWERS_NIGHT\";\n        } else if (this.icon === \"13d\"){\n            return \"SNOW_SHOWERS_DAY\";\n        } else if (this.icon === \"13n\") {\n            return \"SNOW_SHOWERS_NIGHT\";\n        } else if (this.icon === \"50d\" || this.icon === \"50n\") {\n            return \"FOG\";\n        }\n    }\n\n    setIcon() {\n        this.iconType = this.convertIconType();\n        const skycons = new _skycons__WEBPACK_IMPORTED_MODULE_0__.Skycons({\"monochrome\": false, \"colors\": {\"moon\": \"white\", \"cloud\": \"white\", \"light_cloud\": \"white\"}});\n        skycons.add(this.iconDom, _skycons__WEBPACK_IMPORTED_MODULE_0__.Skycons[`${this.iconType}`]);\n        skycons.play();\n    } \n}\n\n\n//# sourceURL=webpack://weather-app/./src/index.js?");

/***/ }),

/***/ "./src/skycons.js":
/*!************************!*\
  !*** ./src/skycons.js ***!
  \************************/
/***/ (function() {

eval("(function(global) {\n  \"use strict\";\n\n  /* Set up a RequestAnimationFrame shim so we can animate efficiently FOR\n   * GREAT JUSTICE. */\n  var requestInterval, cancelInterval;\n\n  (function() {\n    var raf = global.requestAnimationFrame       ||\n              global.webkitRequestAnimationFrame ||\n              global.mozRequestAnimationFrame    ||\n              global.oRequestAnimationFrame      ||\n              global.msRequestAnimationFrame     ,\n        caf = global.cancelAnimationFrame        ||\n              global.webkitCancelAnimationFrame  ||\n              global.mozCancelAnimationFrame     ||\n              global.oCancelAnimationFrame       ||\n              global.msCancelAnimationFrame      ;\n\n    if(raf && caf) {\n      requestInterval = function(fn, delay) {\n        var handle = {value: null};\n\n        function loop() {\n          handle.value = raf(loop);\n          fn();\n        }\n\n        loop();\n        return handle;\n      };\n\n      cancelInterval = function(handle) {\n        caf(handle.value);\n      };\n    }\n\n    else {\n      requestInterval = setInterval;\n      cancelInterval = clearInterval;\n    }\n  }());\n\n  /* Catmull-rom spline stuffs. */\n  /*\n  function upsample(n, spline) {\n    var polyline = [],\n        len = spline.length,\n        bx  = spline[0],\n        by  = spline[1],\n        cx  = spline[2],\n        cy  = spline[3],\n        dx  = spline[4],\n        dy  = spline[5],\n        i, j, ax, ay, px, qx, rx, sx, py, qy, ry, sy, t;\n\n    for(i = 6; i !== spline.length; i += 2) {\n      ax = bx;\n      bx = cx;\n      cx = dx;\n      dx = spline[i    ];\n      px = -0.5 * ax + 1.5 * bx - 1.5 * cx + 0.5 * dx;\n      qx =        ax - 2.5 * bx + 2.0 * cx - 0.5 * dx;\n      rx = -0.5 * ax            + 0.5 * cx           ;\n      sx =                   bx                      ;\n\n      ay = by;\n      by = cy;\n      cy = dy;\n      dy = spline[i + 1];\n      py = -0.5 * ay + 1.5 * by - 1.5 * cy + 0.5 * dy;\n      qy =        ay - 2.5 * by + 2.0 * cy - 0.5 * dy;\n      ry = -0.5 * ay            + 0.5 * cy           ;\n      sy =                   by                      ;\n\n      for(j = 0; j !== n; ++j) {\n        t = j / n;\n\n        polyline.push(\n          ((px * t + qx) * t + rx) * t + sx,\n          ((py * t + qy) * t + ry) * t + sy\n        );\n      }\n    }\n\n    polyline.push(\n      px + qx + rx + sx,\n      py + qy + ry + sy\n    );\n\n    return polyline;\n  }\n\n  function downsample(n, polyline) {\n    var len = 0,\n        i, dx, dy;\n\n    for(i = 2; i !== polyline.length; i += 2) {\n      dx = polyline[i    ] - polyline[i - 2];\n      dy = polyline[i + 1] - polyline[i - 1];\n      len += Math.sqrt(dx * dx + dy * dy);\n    }\n\n    len /= n;\n\n    var small = [],\n        target = len,\n        min = 0,\n        max, t;\n\n    small.push(polyline[0], polyline[1]);\n\n    for(i = 2; i !== polyline.length; i += 2) {\n      dx = polyline[i    ] - polyline[i - 2];\n      dy = polyline[i + 1] - polyline[i - 1];\n      max = min + Math.sqrt(dx * dx + dy * dy);\n\n      if(max > target) {\n        t = (target - min) / (max - min);\n\n        small.push(\n          polyline[i - 2] + dx * t,\n          polyline[i - 1] + dy * t\n        );\n\n        target += len;\n      }\n\n      min = max;\n    }\n\n    small.push(polyline[polyline.length - 2], polyline[polyline.length - 1]);\n\n    return small;\n  }\n  */\n\n  /* Define skycon things. */\n  /* FIXME: I'm *really really* sorry that this code is so gross. Really, I am.\n   * I'll try to clean it up eventually! Promise! */\n  var KEYFRAME = 500,\n      STROKE = 0.08,\n      TAU = 2.0 * Math.PI,\n      TWO_OVER_SQRT_2 = 2.0 / Math.sqrt(2);\n\n  function circle(ctx, x, y, r) {\n    ctx.beginPath();\n    ctx.arc(x, y, r, 0, TAU, false);\n    ctx.fill();\n  }\n\n  function line(ctx, ax, ay, bx, by) {\n    ctx.beginPath();\n    ctx.moveTo(ax, ay);\n    ctx.lineTo(bx, by);\n    ctx.stroke();\n  }\n\n  function puff(ctx, t, cx, cy, rx, ry, rmin, rmax) {\n    var c = Math.cos(t * TAU),\n        s = Math.sin(t * TAU);\n\n    rmax -= rmin;\n\n    circle(\n      ctx,\n      cx - s * rx,\n      cy + c * ry + rmax * 0.5,\n      rmin + (1 - c * 0.5) * rmax\n    );\n  }\n\n  function puffs(ctx, t, cx, cy, rx, ry, rmin, rmax) {\n    var i;\n\n    for(i = 5; i--; )\n      puff(ctx, t + i / 5, cx, cy, rx, ry, rmin, rmax);\n  }\n\n  function cloud(ctx, t, cx, cy, cw, s, color) {\n    t /= 30000;\n\n    var a = cw * 0.21,\n        b = cw * 0.12,\n        c = cw * 0.24,\n        d = cw * 0.28;\n\n    ctx.fillStyle = color;\n    puffs(ctx, t, cx, cy, a, b, c, d);\n\n    ctx.globalCompositeOperation = 'destination-out';\n    puffs(ctx, t, cx, cy, a, b, c - s, d - s);\n    ctx.globalCompositeOperation = 'source-over';\n  }\n\n  function sun(ctx, t, cx, cy, cw, s, color) {\n    t /= 120000;\n\n    var a = cw * 0.25 - s * 0.5,\n        b = cw * 0.32 + s * 0.5,\n        c = cw * 0.50 - s * 0.5,\n        i, p, cos, sin;\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = s;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    ctx.beginPath();\n    ctx.arc(cx, cy, a, 0, TAU, false);\n    ctx.stroke();\n\n    for(i = 8; i--; ) {\n      p = (t + i / 8) * TAU;\n      cos = Math.cos(p);\n      sin = Math.sin(p);\n      line(ctx, cx + cos * b, cy + sin * b, cx + cos * c, cy + sin * c);\n    }\n  }\n\n  function moon(ctx, t, cx, cy, cw, s, color) {\n    t /= 15000;\n\n    var a = cw * 0.29 - s * 0.5,\n        b = cw * 0.05,\n        c = Math.cos(t * TAU),\n        p = c * TAU / -16;\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = s;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    cx += c * b;\n\n    ctx.beginPath();\n    ctx.arc(cx, cy, a, p + TAU / 8, p + TAU * 7 / 8, false);\n    ctx.arc(cx + Math.cos(p) * a * TWO_OVER_SQRT_2, cy + Math.sin(p) * a * TWO_OVER_SQRT_2, a, p + TAU * 5 / 8, p + TAU * 3 / 8, true);\n    ctx.closePath();\n    ctx.stroke();\n  }\n\n  function rain(ctx, t, cx, cy, cw, s, color) {\n    t /= 1350;\n\n    var a = cw * 0.16,\n        b = TAU * 11 / 12,\n        c = TAU *  7 / 12,\n        i, p, x, y;\n\n    ctx.fillStyle = color;\n\n    for(i = 4; i--; ) {\n      p = (t + i / 4) % 1;\n      x = cx + ((i - 1.5) / 1.5) * (i === 1 || i === 2 ? -1 : 1) * a;\n      y = cy + p * p * cw;\n      ctx.beginPath();\n      ctx.moveTo(x, y - s * 1.5);\n      ctx.arc(x, y, s * 0.75, b, c, false);\n      ctx.fill();\n    }\n  }\n\n  function sleet(ctx, t, cx, cy, cw, s, color) {\n    t /= 750;\n\n    var a = cw * 0.1875,\n        b = TAU * 11 / 12,\n        c = TAU *  7 / 12,\n        i, p, x, y;\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = s * 0.5;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    for(i = 4; i--; ) {\n      p = (t + i / 4) % 1;\n      x = Math.floor(cx + ((i - 1.5) / 1.5) * (i === 1 || i === 2 ? -1 : 1) * a) + 0.5;\n      y = cy + p * cw;\n      line(ctx, x, y - s * 1.5, x, y + s * 1.5);\n    }\n  }\n\n  function snow(ctx, t, cx, cy, cw, s, color) {\n    t /= 3000;\n\n    var a  = cw * 0.16,\n        b  = s * 0.75,\n        u  = t * TAU * 0.7,\n        ux = Math.cos(u) * b,\n        uy = Math.sin(u) * b,\n        v  = u + TAU / 3,\n        vx = Math.cos(v) * b,\n        vy = Math.sin(v) * b,\n        w  = u + TAU * 2 / 3,\n        wx = Math.cos(w) * b,\n        wy = Math.sin(w) * b,\n        i, p, x, y;\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = s * 0.5;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    for(i = 4; i--; ) {\n      p = (t + i / 4) % 1;\n      x = cx + Math.sin((p + i / 4) * TAU) * a;\n      y = cy + p * cw;\n\n      line(ctx, x - ux, y - uy, x + ux, y + uy);\n      line(ctx, x - vx, y - vy, x + vx, y + vy);\n      line(ctx, x - wx, y - wy, x + wx, y + wy);\n    }\n  }\n\n  function fogbank(ctx, t, cx, cy, cw, s, color) {\n    t /= 30000;\n\n    var a = cw * 0.21,\n        b = cw * 0.06,\n        c = cw * 0.21,\n        d = cw * 0.28;\n\n    ctx.fillStyle = color;\n    puffs(ctx, t, cx, cy, a, b, c, d);\n\n    ctx.globalCompositeOperation = 'destination-out';\n    puffs(ctx, t, cx, cy, a, b, c - s, d - s);\n    ctx.globalCompositeOperation = 'source-over';\n  }\n\n  function foglines(ctx, t, cw, ch, s, k, color) {\n    t /= 5000;\n\n    var a = Math.cos((t       ) * TAU) * s * 0.02,\n        b = Math.cos((t + 0.25) * TAU) * s * 0.02,\n        c = Math.cos((t + 0.50) * TAU) * s * 0.02,\n        d = Math.cos((t + 0.75) * TAU) * s * 0.02,\n        n = ch * 0.936,\n        e = Math.floor(n - k * 0.5) + 0.5,\n        f = Math.floor(n - k * 2.5) + 0.5;\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = k;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    line(ctx, a + cw * 0.2 + k * 0.5, e, b + cw * 0.8 - k * 0.5, e);\n    line(ctx, c + cw * 0.2 + k * 0.5, f, d + cw * 0.8 - k * 0.5, f);\n  }\n\n  /*\n  var WIND_PATHS = [\n        downsample(63, upsample(8, [\n          -1.00, -0.28,\n          -0.75, -0.18,\n          -0.50,  0.12,\n          -0.20,  0.12,\n          -0.04, -0.04,\n          -0.07, -0.18,\n          -0.19, -0.18,\n          -0.23, -0.05,\n          -0.12,  0.11,\n           0.02,  0.16,\n           0.20,  0.15,\n           0.50,  0.07,\n           0.75,  0.18,\n           1.00,  0.28\n        ])),\n        downsample(31, upsample(16, [\n          -1.00, -0.10,\n          -0.75,  0.00,\n          -0.50,  0.10,\n          -0.25,  0.14,\n           0.00,  0.10,\n           0.25,  0.00,\n           0.50, -0.10,\n           0.75, -0.14,\n           1.00, -0.10\n        ]))\n      ];\n  */\n\n  var WIND_PATHS = [\n        [\n          -0.7500, -0.1800, -0.7219, -0.1527, -0.6971, -0.1225,\n          -0.6739, -0.0910, -0.6516, -0.0588, -0.6298, -0.0262,\n          -0.6083,  0.0065, -0.5868,  0.0396, -0.5643,  0.0731,\n          -0.5372,  0.1041, -0.5033,  0.1259, -0.4662,  0.1406,\n          -0.4275,  0.1493, -0.3881,  0.1530, -0.3487,  0.1526,\n          -0.3095,  0.1488, -0.2708,  0.1421, -0.2319,  0.1342,\n          -0.1943,  0.1217, -0.1600,  0.1025, -0.1290,  0.0785,\n          -0.1012,  0.0509, -0.0764,  0.0206, -0.0547, -0.0120,\n          -0.0378, -0.0472, -0.0324, -0.0857, -0.0389, -0.1241,\n          -0.0546, -0.1599, -0.0814, -0.1876, -0.1193, -0.1964,\n          -0.1582, -0.1935, -0.1931, -0.1769, -0.2157, -0.1453,\n          -0.2290, -0.1085, -0.2327, -0.0697, -0.2240, -0.0317,\n          -0.2064,  0.0033, -0.1853,  0.0362, -0.1613,  0.0672,\n          -0.1350,  0.0961, -0.1051,  0.1213, -0.0706,  0.1397,\n          -0.0332,  0.1512,  0.0053,  0.1580,  0.0442,  0.1624,\n           0.0833,  0.1636,  0.1224,  0.1615,  0.1613,  0.1565,\n           0.1999,  0.1500,  0.2378,  0.1402,  0.2749,  0.1279,\n           0.3118,  0.1147,  0.3487,  0.1015,  0.3858,  0.0892,\n           0.4236,  0.0787,  0.4621,  0.0715,  0.5012,  0.0702,\n           0.5398,  0.0766,  0.5768,  0.0890,  0.6123,  0.1055,\n           0.6466,  0.1244,  0.6805,  0.1440,  0.7147,  0.1630,\n           0.7500,  0.1800\n        ],\n        [\n          -0.7500,  0.0000, -0.7033,  0.0195, -0.6569,  0.0399,\n          -0.6104,  0.0600, -0.5634,  0.0789, -0.5155,  0.0954,\n          -0.4667,  0.1089, -0.4174,  0.1206, -0.3676,  0.1299,\n          -0.3174,  0.1365, -0.2669,  0.1398, -0.2162,  0.1391,\n          -0.1658,  0.1347, -0.1157,  0.1271, -0.0661,  0.1169,\n          -0.0170,  0.1046,  0.0316,  0.0903,  0.0791,  0.0728,\n           0.1259,  0.0534,  0.1723,  0.0331,  0.2188,  0.0129,\n           0.2656, -0.0064,  0.3122, -0.0263,  0.3586, -0.0466,\n           0.4052, -0.0665,  0.4525, -0.0847,  0.5007, -0.1002,\n           0.5497, -0.1130,  0.5991, -0.1240,  0.6491, -0.1325,\n           0.6994, -0.1380,  0.7500, -0.1400\n        ]\n      ],\n      WIND_OFFSETS = [\n        {start: 0.36, end: 0.11},\n        {start: 0.56, end: 0.16}\n      ];\n\n  function leaf(ctx, t, x, y, cw, s, color) {\n    var a = cw / 8,\n        b = a / 3,\n        c = 2 * b,\n        d = (t % 1) * TAU,\n        e = Math.cos(d),\n        f = Math.sin(d);\n\n    ctx.fillStyle = color;\n    ctx.strokeStyle = color;\n    ctx.lineWidth = s;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    ctx.beginPath();\n    ctx.arc(x        , y        , a, d          , d + Math.PI, false);\n    ctx.arc(x - b * e, y - b * f, c, d + Math.PI, d          , false);\n    ctx.arc(x + c * e, y + c * f, b, d + Math.PI, d          , true );\n    ctx.globalCompositeOperation = 'destination-out';\n    ctx.fill();\n    ctx.globalCompositeOperation = 'source-over';\n    ctx.stroke();\n  }\n\n  function swoosh(ctx, t, cx, cy, cw, s, index, total, color, leafcolor) {\n    t /= 2500;\n\n    var path = WIND_PATHS[index],\n        a = (t + index - WIND_OFFSETS[index].start) % total,\n        c = (t + index - WIND_OFFSETS[index].end  ) % total,\n        e = (t + index                            ) % total,\n        b, d, f, i;\n\n    ctx.strokeStyle = color;\n    ctx.lineWidth = s;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n\n    if(a < 1) {\n      ctx.beginPath();\n\n      a *= path.length / 2 - 1;\n      b  = Math.floor(a);\n      a -= b;\n      b *= 2;\n      b += 2;\n\n      ctx.moveTo(\n        cx + (path[b - 2] * (1 - a) + path[b    ] * a) * cw,\n        cy + (path[b - 1] * (1 - a) + path[b + 1] * a) * cw\n      );\n\n      if(c < 1) {\n        c *= path.length / 2 - 1;\n        d  = Math.floor(c);\n        c -= d;\n        d *= 2;\n        d += 2;\n\n        for(i = b; i !== d; i += 2)\n          ctx.lineTo(cx + path[i] * cw, cy + path[i + 1] * cw);\n\n        ctx.lineTo(\n          cx + (path[d - 2] * (1 - c) + path[d    ] * c) * cw,\n          cy + (path[d - 1] * (1 - c) + path[d + 1] * c) * cw\n        );\n      }\n\n      else\n        for(i = b; i !== path.length; i += 2)\n          ctx.lineTo(cx + path[i] * cw, cy + path[i + 1] * cw);\n\n      ctx.stroke();\n    }\n\n    else if(c < 1) {\n      ctx.beginPath();\n\n      c *= path.length / 2 - 1;\n      d  = Math.floor(c);\n      c -= d;\n      d *= 2;\n      d += 2;\n\n      ctx.moveTo(cx + path[0] * cw, cy + path[1] * cw);\n\n      for(i = 2; i !== d; i += 2)\n        ctx.lineTo(cx + path[i] * cw, cy + path[i + 1] * cw);\n\n      ctx.lineTo(\n        cx + (path[d - 2] * (1 - c) + path[d    ] * c) * cw,\n        cy + (path[d - 1] * (1 - c) + path[d + 1] * c) * cw\n      );\n\n      ctx.stroke();\n    }\n\n    if(e < 1) {\n      e *= path.length / 2 - 1;\n      f  = Math.floor(e);\n      e -= f;\n      f *= 2;\n      f += 2;\n\n      leaf(\n        ctx,\n        t,\n        cx + (path[f - 2] * (1 - e) + path[f    ] * e) * cw,\n        cy + (path[f - 1] * (1 - e) + path[f + 1] * e) * cw,\n        cw,\n        s,\n        leafcolor\n      );\n    }\n  }\n\n  function thunderbolts(ctx, t, cx, cy, cw, color) {\n    t /= 1000;\n\n    var alpha = 1 - t % 1,\n        a = cw / 25,\n        b = Math.floor(t % 4),\n        x = x = cx + ((b - 1.5) / 1.5) * (b === 1 || b === 2 ? -1 : 1) * cw * 0.16,\n        y = cy;\n\n    ctx.fillStyle = color;\n    ctx.globalAlpha = alpha;\n\n    ctx.beginPath();\n    ctx.moveTo(x - a, y - a * 5);\n    ctx.lineTo(x - a * 3, y);\n    ctx.lineTo(x, y);\n    ctx.lineTo(x - a * 2, y + a * 5);\n    ctx.lineTo(x + a * 3, y - a);\n    ctx.lineTo(x, y - a);\n    ctx.lineTo(x + a * 2, y - a * 5);\n    ctx.closePath();\n    ctx.fill();\n\n    ctx.globalAlpha = 1;\n  }\n\n  function hail(ctx, t, cx, cy, cw, s, color) {\n    t /= 900;\n\n    var a = cw * 0.16,\n        i, p, x, y;\n\n    ctx.fillStyle = color;\n\n    for(i = 8; i--; ) {\n      p = (t + i / 8) % 1;\n      x = cx + ((i - 3) / 3) * (i === 1 || i === 3 || i === 4 || i === 6 ? -1 : 1) * a;\n      y = cy + p * p * cw;\n      ctx.beginPath();\n      ctx.moveTo(x, y);\n      ctx.arc(x, y, s * 0.4, 0, 2 * Math.PI, false);\n      ctx.fill();\n    }\n  }\n\n  var Skycons = function(opts) {\n        opts = opts || {};\n        this.list        = [];\n        this.interval    = null;\n        this.monochrome = typeof(opts.monochrome) === \"undefined\" ? true :  opts.monochrome;\n        opts.colors = opts.colors || {};\n        this.colors = {\n            main        : opts.colors.main        || \"#111\",\n            moon        : opts.colors.moon        || \"#353545\",\n            fog         : opts.colors.fog         || \"#CCC\",\n            fogbank     : opts.colors.fogbank     || \"#AAA\",\n            light_cloud : opts.colors.light_cloud || \"#888\",\n            cloud       : opts.colors.cloud       || \"#666\",\n            dark_cloud  : opts.colors.dark_cloud  || \"#444\",\n            thunder     : opts.colors.thunder     || \"#FF0\",\n            snow        : opts.colors.snow        || \"#C2EEFF\",\n            hail        : opts.colors.hail        || \"#CCF\",\n            sleet       : opts.colors.sleet       || \"#C2EEFF\",\n            wind        : opts.colors.wind        || \"#777\",\n            leaf        : opts.colors.leaf        || \"#2C5228\",\n            rain        : opts.colors.rain        || \"#7FDBFF\",\n            sun         : opts.colors.sun         || \"#FFDC00\"\n        };\n\n        if(this.monochrome) {\n            this.color = opts.color || this.colors.main;\n        } else {\n            this.color = this.colors ;\n        }\n        this.resizeClear = !!(opts && opts.resizeClear);\n      };\n\n  Skycons.CLEAR_DAY = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    sun(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, color.sun || color);\n  };\n\n  Skycons.CLEAR_NIGHT = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    moon(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, color.moon || color);\n  };\n\n  Skycons.PARTLY_CLOUDY_DAY = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    sun(ctx, t, w * 0.625, h * 0.375, s * 0.75, s * STROKE * 0.9, color.sun || color);\n    cloud(ctx, t, w * 0.375, h * 0.625, s * 0.75, s * STROKE * 0.9, color.light_cloud || color);\n  };\n\n  Skycons.PARTLY_CLOUDY_NIGHT = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    moon(ctx, t, w * 0.667, h * 0.375, s * 0.75, s * STROKE * 0.9, color.moon || color);\n    cloud(ctx, t, w * 0.375, h * 0.625, s * 0.75, s * STROKE * 0.9, color.light_cloud || color);\n  };\n\n  Skycons.CLOUDY = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    cloud(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, color.light_cloud || color || color);\n  };\n\n  Skycons.RAIN = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    rain(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.rain || color);\n    cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.cloud || color);\n  };\n\n  Skycons.SHOWERS_DAY = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n\n    sun(ctx, t, w * 0.625, h * 0.325, s * 0.65, s * STROKE * 0.8, color.sun || color);\n    rain(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.rain || color);\n    cloud(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.cloud || color);\n  }\n\n  Skycons.SHOWERS_NIGHT = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    moon(ctx, t, w * 0.667, h * 0.325, s * 0.75, s * STROKE * 0.8, color.moon || color);\n    rain(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.rain || color);\n    cloud(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.cloud || color);\n  }\n\n  Skycons.SLEET = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    sleet(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.sleet || color);\n    cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.cloud || color);\n  };\n\n  Skycons.RAIN_SNOW = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    rain(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.rain || color);\n    snow(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.snow || color);\n    cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.cloud || color);\n  };\n\n  Skycons.RAIN_SNOW_SHOWERS_DAY = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    sun(ctx, t, w * 0.625, h * 0.325, s * 0.65, s * STROKE * 0.8, color.sun || color);\n    snow(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.snow || color);\n    rain(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.rain || color);\n    cloud(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.cloud || color);\n  };\n\n  Skycons.RAIN_SNOW_SHOWERS_NIGHT = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    moon(ctx, t, w * 0.667, h * 0.325, s * 0.75, s * STROKE * 0.8, color.moon || color);\n    snow(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.snow || color);\n    rain(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.rain || color);\n    cloud(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.cloud || color);\n  };\n\n  Skycons.SNOW = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    snow(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.snow || color);\n    cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.cloud || color);\n  };\n\n  Skycons.SNOW_SHOWERS_DAY = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    sun(ctx, t, w * 0.625, h * 0.325, s * 0.65, s * STROKE * 0.8, color.sun || color);\n    snow(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.snow || color);\n    cloud(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.cloud || color);\n  }\n\n  Skycons.SNOW_SHOWERS_NIGHT = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    moon(ctx, t, w * 0.667, h * 0.325, s * 0.75, s * STROKE * 0.8, color.moon || color);\n    snow(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.snow || color);\n    cloud(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.cloud || color);\n  }\n\n  Skycons.WIND = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    swoosh(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, 0, 2, color.wind || color, color.leaf || color);\n    swoosh(ctx, t, w * 0.5, h * 0.5, s, s * STROKE, 1, 2, color.wind || color, color.leaf || color);\n  };\n\n  Skycons.FOG = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h),\n        k = s * STROKE;\n\n    fogbank(ctx, t, w * 0.5, h * 0.32, s * 0.75, k * 0.9, color.light_cloud || color);\n    foglines(ctx, t, w, h, s, k, color.fog || color);\n  };\n\n  Skycons.THUNDER = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    thunderbolts(ctx, t, w * 0.5, h * 0.825, s * 0.9, color.thunder || color)\n    cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.dark_cloud || color);\n  };\n\n  Skycons.THUNDER_RAIN = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    rain(ctx, t, w * 0.5, h * 0.5, s * 0.9, s * STROKE, color.rain || color);\n    thunderbolts(ctx, t, w * 0.5, h * 0.825, s * 0.9, color.thunder || color)\n    cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.dark_cloud || color);\n  };\n\n  Skycons.THUNDER_SHOWERS_DAY = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    thunderbolts(ctx, t, w * 0.375, h * 0.85, s * 0.7, color.thunder || color)\n    sun(ctx, t, w * 0.625, h * 0.325, s * 0.65, s * STROKE * 0.8, color.sun || color);\n    rain(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.rain || color);\n    cloud(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.dark_cloud || color);\n  };\n\n  Skycons.THUNDER_SHOWERS_NIGHT = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    thunderbolts(ctx, t, w * 0.375, h * 0.85, s * 0.7, color.thunder || color)\n    moon(ctx, t, w * 0.667, h * 0.325, s * 0.75, s * STROKE * 0.8, color.moon || color);\n    rain(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.rain || color);\n    cloud(ctx, t, w * 0.375, h * 0.5, s * 0.7, s * STROKE * 0.9, color.dark_cloud || color);\n  };\n\n  Skycons.HAIL = function(ctx, t, color) {\n    var w = ctx.canvas.width,\n        h = ctx.canvas.height,\n        s = Math.min(w, h);\n\n    hail(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.hail || color);\n    cloud(ctx, t, w * 0.5, h * 0.37, s * 0.9, s * STROKE, color.cloud || color);\n  };\n\n  Skycons.prototype = {\n    _determineDrawingFunction: function(draw) {\n      if(typeof draw === \"string\")\n        draw = Skycons[draw.toUpperCase().replace(/-/g, \"_\")] || null;\n\n      return draw;\n    },\n    add: function(el, draw) {\n      var obj;\n\n      if(typeof el === \"string\")\n        el = document.getElementById(el);\n\n      // Does nothing if canvas name doesn't exists\n      if(el === null || el === undefined)\n        return;\n\n      draw = this._determineDrawingFunction(draw);\n\n      // Does nothing if the draw function isn't actually a function\n      if(typeof draw !== \"function\")\n        return;\n\n      obj = {\n        element: el,\n        context: el.getContext(\"2d\"),\n        drawing: draw\n      };\n\n      this.list.push(obj);\n      this.draw(obj, KEYFRAME);\n    },\n    set: function(el, draw) {\n      var i;\n\n      if(typeof el === \"string\")\n        el = document.getElementById(el);\n\n      for(i = this.list.length; i--; )\n        if(this.list[i].element === el) {\n          this.list[i].drawing = this._determineDrawingFunction(draw);\n          this.draw(this.list[i], KEYFRAME);\n          return;\n        }\n\n      this.add(el, draw);\n    },\n    remove: function(el) {\n      var i;\n\n      if(typeof el === \"string\")\n        el = document.getElementById(el);\n\n      for(i = this.list.length; i--; )\n        if(this.list[i].element === el) {\n          this.list.splice(i, 1);\n          return;\n        }\n    },\n    draw: function(obj, time) {\n      var canvas = obj.context.canvas;\n\n      if(this.resizeClear)\n        canvas.width = canvas.width;\n\n      else\n        obj.context.clearRect(0, 0, canvas.width, canvas.height);\n\n      obj.drawing(obj.context, time, this.color);\n    },\n    play: function() {\n      var self = this;\n\n      this.pause();\n      this.interval = requestInterval(function() {\n        var now = Date.now(),\n            i;\n\n        for(i = self.list.length; i--; )\n          self.draw(self.list[i], now);\n      }, 1000 / 60);\n    },\n    pause: function() {\n      var i;\n\n      if(this.interval) {\n        cancelInterval(this.interval);\n        this.interval = null;\n      }\n    }\n  };\n\n  global.Skycons = Skycons;\n}(this));\n\n\n//# sourceURL=webpack://weather-app/./src/skycons.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;