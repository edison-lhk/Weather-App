/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("// Current Weather Section\nconst preloader = document.querySelector('.preloader');\nconst openMenuBtn = document.querySelector('button.location-search-btn');\nconst currentLocationBtn = document.querySelector('.location-bar > .material-icons');\nconst currentWeatherIcon = document.querySelector('canvas#current-weather-icon');\nconst currentTemp = document.querySelector('.temperature-degrees');\nconst currentTempUnit = document.querySelector('.current-temperature-display > span');\nconst currentFeelsLikeTemp = document.querySelector('.feels-like-temperature');\nconst currentTempDescription = document.querySelector('.current-weather-section .temperature-description');\nconst currentDate = document.querySelector('.current-date');\nconst currentLocation = document.querySelector('.current-location');\n\n// Search Menu Section\nconst searchMenu = document.querySelector('.search-menu-container');\nconst closeMenuBtn = document.querySelector('.close-menu-btn');\nconst locationSearchForm = document.querySelector('form.search-bar-container');\nconst locationSearchBar = document.querySelector('input#location-search');\nconst searchSubmitBtn = document.querySelector('button.submit-search');\nconst searchSuggestionsDisplay = Array.from(document.querySelectorAll('.search-location-suggestions'));\n\n// One Week Forecast Weather Section\nconst degreeCelsiusIcon = document.querySelector('.degree-celsius-icon');\nconst degreeFahrenheitIcon = document.querySelector('.degree-fahrenheit-icon');\nlet temperatureUnitState = 'Degree Celsius';\nconst forecastBoxes = Array.from(document.querySelectorAll('.forecast-box'));\nconst forecastBoxesDate = Array.from(document.querySelectorAll('.forecast-box > .date'));\nconst forecastBoxesIcon = Array.from(document.querySelectorAll('.forecast-box > #forecast-weather-icon'));\nconst forecastBoxesHighestTemp = Array.from(document.querySelectorAll('.highest-temperature > .temperature-degrees'));\nconst forecastBoxesHighestTempUnit = Array.from(document.querySelectorAll('.highest-temperature > span'));\nconst forecastBoxesLowestTemp = Array.from(document.querySelectorAll('.lowest-temperature > .temperature-degrees'));\nconst forecastBoxesLowestTempUnit = Array.from(document.querySelectorAll('.lowest-temperature > span'));\n\n// Current Weather Highlights Section \nconst windStatusBoxValue = document.querySelector('.wind-status-value');\nconst windStatusBoxDirectionValue = document.querySelector('.wind-direction-value');\nconst windStatusBoxDirectionIcon = document.querySelector('.wind-direction-icon');\nconst humidityBoxValue = document.querySelector('.humidity-value');\nconst humidityBoxPercentageBar = document.querySelector('.percentage-value');\nconst visibilityBoxValue = document.querySelector('.visibility-value');\nconst airPressureBoxValue = document.querySelector('.air-pressure-value');\n\n// Load user's location weather info every time user entered the page\nwindow.addEventListener('load', function() {\n    displayCurrentLocationWeather();\n    closeLoadingPage();\n});\n\n// Display user's location weather info when user clicked on the current location button\ncurrentLocationBtn.addEventListener('click', displayCurrentLocationWeather);\n\n// Open and close search menu\nopenMenuBtn.addEventListener('click', () => {\n    searchMenu.classList.add('active-menu');\n\n    searchSuggestionsDisplay.forEach(box => {\n        box.innerHTML = '';\n        box.style.display = 'none';\n    })\n})\n\ncloseMenuBtn.addEventListener('click', () => {\n    searchMenu.classList.remove('active-menu');\n    locationSearchBar.value = '';\n})\n\n// Display search location suggestions when user type sth in the search bar\nlocationSearchBar.addEventListener('keyup', async function(e) {\n\n    if (e.key != \"Enter\") {\n        if (locationSearchBar.value != '') {\n            searchSuggestionsDisplay.forEach(box => {\n                box.innerHTML = '';\n                box.style.display = 'none';\n            })\n            await findLocationName(locationSearchBar.value.trim());\n        } else {\n            searchSuggestionsDisplay.forEach(box => {\n                box.innerHTML = '';\n                box.style.display = 'none';\n            });\n        }\n    } else {\n        return;\n    }\n});\n\n// Display desired location weather info when user submit the location form\nlocationSearchForm.addEventListener('submit', async function(e) {\n\n    e.preventDefault();\n\n    if (locationSearchBar.value != '') {\n        let latitude;\n        let longitude;\n        [latitude, longitude] = await convertLocationNameToGeoCoordinates(locationSearchBar.value.trim());\n        await displayLocationWeather(latitude, longitude);\n        locationSearchBar.value = '';\n        setTimeout(() => {\n            searchMenu.classList.remove('active-menu');\n            window.scrollTo(0, 0);\n        }, 500);\n    } else {\n        return;\n    }\n});\n\n// Output location search result when user clicked on a location recommedation box\nsearchSuggestionsDisplay.forEach(box => {\n    box.addEventListener('click', async () => {\n        locationSearchBar.value = box.firstChild.textContent;\n        await updateLocationWeather(box.firstChild);\n        locationSearchBar.value = '';\n        setTimeout(() => {\n            searchMenu.classList.remove('active-menu');\n            window.scrollTo(0, 0);\n        }, 500);\n    })\n})\n\n// Switch between Degree Celsius & Degree Fahrenheit \ndegreeCelsiusIcon.addEventListener('click', () => {\n    if (temperatureUnitState != 'Degree Celsius') {\n        degreeCelsiusIcon.style.cssText = 'background-color: #E7E7EB; border: 10px solid #E7E7EB; color: #110E3C';\n        degreeFahrenheitIcon.style.cssText = 'background-color: #6E707A; border: 10px solid #6E707A; color: #E7E7EB';\n        temperatureUnitState = 'Degree Celsius';\n        switchTemperatureUnit();\n    } else {\n        return;\n    }\n})\n\ndegreeFahrenheitIcon.addEventListener('click', () => {\n    if (temperatureUnitState != 'Degree Fahrenheit') {\n        degreeFahrenheitIcon.style.cssText = 'background-color: #E7E7EB; border: 10px solid #E7E7EB; color: #110E3C';\n        degreeCelsiusIcon.style.cssText = 'background-color: #6E707A; border: 10px solid #6E707A; color: #E7E7EB';\n        temperatureUnitState = 'Degree Fahrenheit';\n        switchTemperatureUnit();\n    } else {\n        return;\n    }\n})\n\n// Update location weather info every 30 secs\nsetInterval(async () => {await updateLocationWeather(currentLocation)}, 60000);\n\n// Close the loading page after the current weather information has rendered\nfunction closeLoadingPage() {\n\n    setTimeout(() => {\n        document.documentElement.style.scrollBehavior = \"auto\";\n        window.scrollTo(0, 0);\n        preloader.style.display = \"none\";\n    }, 3500);\n\n}\n\n// Find all related city/country list based on search value\nasync function findLocationName(searchValue) {\n\n    const geocodingAPI = `https://api.openweathermap.org/geo/1.0/direct?q=${searchValue}&limit=5&appid=ec021a840e27b53a39dd9bb4563c0c3c`;\n\n    const reponse = await fetch(geocodingAPI, {mode: 'cors'});\n\n    const locationInfo = await reponse.json();\n\n    for (let i = 0; i < locationInfo.length; i++) {\n\n        const searchSuggestionsHTML = `<p style=\"font-size: 16px;\">${locationInfo[i].name}, ${locationInfo[i].country}</p> <span class=\"material-icons\">navigate_next</span>`;\n        searchSuggestionsDisplay[i].innerHTML = searchSuggestionsHTML;\n        searchSuggestionsDisplay[i].style.display = 'flex';\n        \n    }\n}\n\n// Convert the location user searched to Geographical Coordinates\nasync function convertLocationNameToGeoCoordinates(cityName, countryName) {\n\n    const geocodingAPI = `https://api.openweathermap.org/geo/1.0/direct?q=${cityName},${countryName}&limit=1&appid=ec021a840e27b53a39dd9bb4563c0c3c`;\n    \n    const reponse = await fetch(geocodingAPI, {mode: 'cors'});\n    \n    const locationInfo = await reponse.json();\n\n    const geoCoordinates = [locationInfo[0].lat, locationInfo[0].lon];\n\n    return geoCoordinates;\n\n}\n\n// Display the weather information for the respective location\nasync function displayLocationWeather(latitude, longitude) {\n\n    const currentWeatherAPI = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=ec021a840e27b53a39dd9bb4563c0c3c&units=metric`;\n\n    const currentWeatherInfoReponse = await fetch(currentWeatherAPI, {mode: 'cors'});\n            \n    const currentWeatherInfo = await currentWeatherInfoReponse.json();\n\n    const oneCallAPI = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&appid=ec021a840e27b53a39dd9bb4563c0c3c&units=metric`;\n\n    const oneCallInfoReponse = await fetch(oneCallAPI, {mode: 'cors'});\n\n    const oneCallInfo = await oneCallInfoReponse.json();\n\n    // Display current weather information\n    if (temperatureUnitState == 'Degree Celsius') {\n\n        currentTemp.textContent = Math.round(currentWeatherInfo.main.temp);\n\n        currentTempUnit.textContent = 'Â°C';\n\n        currentFeelsLikeTemp.textContent = Math.round(currentWeatherInfo.main.feels_like);\n\n    } else if (temperatureUnitState == 'Degree Fahrenheit') {\n\n        currentTemp.textContent = Math.round(currentWeatherInfo.main.temp * 1.8 + 32);\n\n        currentTempUnit.textContent = 'Â°F';\n\n        currentFeelsLikeTemp.textContent = Math.round(currentWeatherInfo.main.feels_like * 1.8 + 32);\n\n    }\n\n    currentTempDescription.textContent = currentWeatherInfo.weather[0].main;\n\n    const currentGMTTimzone = new Date();\n\n    currentDate.textContent = new Date(currentGMTTimzone.getTime() + oneCallInfo.timezone_offset * 1000).toUTCString().slice(0, 11);\n\n    currentLocation.textContent = currentWeatherInfo.name + ', ' + currentWeatherInfo.sys.country;\n\n    new Icon(currentWeatherIcon, currentWeatherInfo.weather[0].icon).setIcon();\n\n    // Display 1 week forecast weather information\n\n    for (let i = 0; i < forecastBoxes.length; i++) {\n\n        forecastBoxesDate[i].textContent = new Date(currentGMTTimzone.getTime() + oneCallInfo.timezone_offset * 1000 + (i + 1) * 1000 * 60 * 60 *24).toUTCString().slice(0, 11);\n        new Icon(forecastBoxesIcon[i], oneCallInfo.daily[i + 1].weather[0].icon).setIcon();\n\n        if (temperatureUnitState == 'Degree Celsius') {\n\n            forecastBoxesHighestTemp[i].textContent = Math.round(oneCallInfo.daily[i + 1].temp.max);\n            forecastBoxesHighestTempUnit[i].textContent = 'Â°C';\n\n            forecastBoxesLowestTemp[i].textContent = Math.round(oneCallInfo.daily[i + 1].temp.min);\n            forecastBoxesLowestTempUnit[i].textContent = 'Â°C';\n\n        } else if (temperatureUnitState == 'Degree Fahrenheit') {\n\n            forecastBoxesHighestTemp[i].textContent = Math.round(oneCallInfo.daily[i + 1].temp.max * 1.8 + 32);\n            forecastBoxesHighestTempUnit[i].textContent = 'Â°F';\n\n            forecastBoxesLowestTemp[i].textContent = Math.round(oneCallInfo.daily[i + 1].temp.min * 1.8 + 32);\n            forecastBoxesLowestTempUnit[i].textContent = 'Â°F';\n\n        }\n    }\n\n    // Display today's weather highlights (wind status, humidity, etc) for the respective location\n\n    windStatusBoxValue.textContent = (currentWeatherInfo.wind.speed * 2.23693629).toFixed(1);\n    windStatusBoxDirectionValue.textContent = [\"N\", \"NNE\", \"NE\", \"ENE\", \"E\", \"ESE\", \"SE\", \"SSE\", \"S\", \"SSW\", \"SW\", \"WSW\", \"W\", \"WNW\", \"NW\", \"NNW\", \"N\"][(Math.round(currentWeatherInfo.wind.deg / 22.5))];\n    windStatusBoxDirectionIcon.style.transform = `rotate(${Math.round(currentWeatherInfo.wind.deg / 22.5) * 22.5}deg)`;\n\n    humidityBoxValue.textContent = currentWeatherInfo.main.humidity;\n    humidityBoxPercentageBar.style.width = `${currentWeatherInfo.main.humidity}%`; \n\n    visibilityBoxValue.textContent = (currentWeatherInfo.visibility / 1000).toFixed(1);\n\n    airPressureBoxValue.textContent = currentWeatherInfo.main.pressure;\n}\n\n// Display the current location weather\nfunction displayCurrentLocationWeather() {\n\n    if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(async position => {\n            const latitude = position.coords.latitude;\n            const longitude = position.coords.longitude;\n            await displayLocationWeather(latitude, longitude);\n        })\n    }\n\n}\n\n// Update the location weather info\nasync function updateLocationWeather(location) {\n    let latitude, longitude, cityName, countryName;\n    [cityName, countryName] = location.textContent.split(', ');\n    [latitude, longitude] = await convertLocationNameToGeoCoordinates(cityName, countryName);\n    displayLocationWeather(latitude, longitude);\n}\n\n// Switch temperature between Degree Celsius & Degree Fahrenheit \nfunction switchTemperatureUnit() {\n    if (temperatureUnitState == 'Degree Celsius') {\n        currentTemp.textContent = Math.round((currentTemp.textContent - 32) / 1.8);\n        currentTempUnit.textContent = 'Â°C';\n        currentFeelsLikeTemp.textContent = Math.round((currentFeelsLikeTemp.textContent - 32) / 1.8);\n        forecastBoxesHighestTemp.forEach(temp => {\n            temp.textContent = Math.round((temp.textContent - 32) / 1.8);\n        })\n        forecastBoxesHighestTempUnit.forEach(unit => {\n            unit.textContent = 'Â°C';\n        });\n        forecastBoxesLowestTemp.forEach(temp => {\n            temp.textContent = Math.round((temp.textContent - 32) / 1.8);\n        })\n        forecastBoxesLowestTempUnit.forEach(unit => {\n            unit.textContent = 'Â°C';\n        });\n    } else if (temperatureUnitState == 'Degree Fahrenheit') {\n        currentTemp.textContent = Math.round(currentTemp.textContent * 1.8 + 32);\n        currentTempUnit.textContent = 'Â°F';\n        currentFeelsLikeTemp.textContent = Math.round(currentFeelsLikeTemp.textContent * 1.8 + 32);\n        forecastBoxesHighestTemp.forEach(temp => {\n            temp.textContent = Math.round(temp.textContent * 1.8 + 32);\n        })\n        forecastBoxesHighestTempUnit.forEach(unit => {\n            unit.textContent = 'Â°F';\n        });\n        forecastBoxesLowestTemp.forEach(temp => {\n            temp.textContent = Math.round(temp.textContent * 1.8 + 32);\n        })\n        forecastBoxesLowestTempUnit.forEach(unit => {\n            unit.textContent = 'Â°F';\n        });\n    }\n}\n\nclass Icon {\n    constructor(iconDOM, icon) {\n        this.iconDom = iconDOM;\n        this.icon = icon;\n        this.iconType = null;\n    }\n\n    convertIconType() {\n        if (this.icon === \"01d\") {\n            return \"CLEAR_DAY\";\n        } else if (this.icon === \"01n\") {\n            return \"CLEAR_NIGHT\";\n        } else if (this.icon === \"02d\" || this.icon === \"04d\") {\n            return \"PARTLY_CLOUDY_DAY\";\n        } else if (this.icon === \"02n\" || this.icon === \"04n\") {\n            return \"PARTLY_CLOUDY_NIGHT\";\n        } else if (this.icon === \"03d\" || this.icon === \"03n\") {\n            return \"CLOUDY\";\n        } else if (this.icon === \"09d\" || this.icon === \"09n\") {\n            return \"RAIN\";\n        } else if (this.icon === \"10d\") {\n            return \"SHOWERS_DAY\";\n        } else if (this.icon === \"10n\") {\n            return \"SHOWERS_NIGHT\";\n        } else if (this.icon === \"11d\") {\n            return \"THUNDER_SHOWERS_DAY\";\n        } else if (this.icon === \"11n\") {\n            return \"THUNDER_SHOWERS_NIGHT\";\n        } else if (this.icon === \"13d\"){\n            return \"SNOW_SHOWERS_DAY\";\n        } else if (this.icon === \"13n\") {\n            return \"SNOW_SHOWERS_NIGHT\";\n        } else if (this.icon === \"50d\" || this.icon === \"50n\") {\n            return \"FOG\";\n        }\n    }\n\n    setIcon() {\n        this.iconType = this.convertIconType();\n        const skycons = new Skycons({\"resizeClear\": true, \"monochrome\": false, \"colors\": {\"moon\": \"gray\", \"cloud\": \"white\", \"light_cloud\": \"white\"}});\n        skycons.add(this.iconDom, Skycons[`${this.iconType}`]);\n        skycons.play();\n    }\n}\n\n\n//# sourceURL=webpack://weather-app/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;